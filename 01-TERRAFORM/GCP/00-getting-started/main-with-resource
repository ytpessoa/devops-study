
/*
  export GOOGLE_CREDENTIALS="~/Desktop/COMMANDS/01-TERRAFORM/GCP/00-getting-started/terraformserviceaccount.json"
  export GOOGLE_PROJECT="testegeralproject"
  export GOOGLE_REGION="us-central1"
  export GOOGLE_ZONE="us-central1-c"
  #Add in 'bash_profile' or 'bashrc' to store my credentials across(em todas) sessions.
 echo $GOOGLE_CREDENTIALS && echo $GOOGLE_PROJECT && echo $GOOGLE_REGION  && echo $GOOGLE_ZONE

*/


/* ****terragrunt****

  terraform {
    backend "gcs" {}
  }
*/

provider "google" {
  version = "~> 3.7" #depois do primeiro "terraform init"  
  #todas configuradas via variáveis de ambiente
  #ou
  #file variables.tf
  credentials = file(var.credentials_file)
  project = var.project
  region  = var.region
  zone    = var.zone
}


#1-network

resource "google_compute_network" "vpc_network" {
    #propriedades
    name = "vpc-network-of-the-resource"
}

#2-instancia(VM) 
resource "google_compute_instance" "vm_instance" {
  name         = "terraform-instance"
#  machine_type = "f1-micro"
  machine_type = var.machine_types[var.environment]
  tags         = ["web", "dev"]
      /*  
      Read!!! => https://www.terraform.io/docs/provisioners/index.html  
      Executed on the machine running Terraform: local host, not the VM instance itself(em si)
      Provisioners only run when a resource is created:
        Run "taint"(mancha)
        Run: $ terraform taint google_compute_instance.vm_instance
                Resource instance google_compute_instance.vm_instance has been marked as tainted.
        Resource tainted -> will be destroyed and recreated during the next "apply"  
      */    
 
  provisioner "local-exec"{
    command = "echo ${google_compute_instance.vm_instance.name}: ${google_compute_instance.vm_instance.network_interface[0].access_config[0].nat_ip}  >> ip_address.txt"
      #output=> "terraform-instance: 34.70.73.51"      
      #[0]: first one network internface
      #[0]: first one block "access_config"
  }

  boot_disk {
    initialize_params {
        #image = "debian-cloud/debian-9"
        image = "cos-cloud/cos-stable"
    }
  }
  network_interface {
      #network = resourceType.resourceName.propriedade
      network = google_compute_network.vpc_network.self_link
          
      access_config {        
        nat_ip = google_compute_address.vm_static_ip.address 
        #implicit dependency: "google_compute_instance" --> depois: "google_compute_address"      
      }
          
  }
}

#3-Assigning a Static IP Address:
resource "google_compute_address" "vm_static_ip" {
  #ID = google_compute_address.vm_static_ip
  name = "terraform-static-ip"
}

/*
#Cenário:an application will run on our instance expects to use a specific Cloud Storage bucket:
#4
resource "google_storage_bucket" "example_bucket" {
  name     = "terraform-example-bucket-<YOURNAME>-<TODAY>"
  location = "US"

  website {
    main_page_suffix = "index.html"
    not_found_page   = "404.html"
  }
}
#5- Create a new instance that uses the bucket
resource "google_compute_instance" "another_instance" {
  #depende do resource "google_storage_bucket"  ser criado antes:
  depends_on = [google_storage_bucket.example_bucket]

  name         = "terraform-instance-2"
  machine_type = "f1-micro"

  boot_disk {
    initialize_params {
      image = "cos-cloud/cos-stable"
    }
  }
  network_interface {
    network = google_compute_network.vpc_network.self_link
    access_config {
    }
  }
}
*/


####################
# Part 2: MODULE   #
####################

module "network" {
  source  = "terraform-google-modules/network/google" #the only mandatory argument for all modules. 
  version = "1.1.0"

  network_name = "vpc-network-of-the-module"
  project_id   = var.project

  subnets = [
    {
      subnet_name   = "subnet-01"
      subnet_ip     = var.cidrs[0]
      subnet_region = var.region
    },
    {
      subnet_name   = "subnet-02"
      subnet_ip     = var.cidrs[1]
      subnet_region = var.region

      subnet_private_access = "true"
    },
  ]

  secondary_ranges = {
    subnet-01 = []
    subnet-02 = []
  }
}